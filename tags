!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	pieces.py	/^A = makeleaper(2,2) # alfil$/;"	v
B	pieces.py	/^B = makerider((1, 1)) # bishop$/;"	v
BAD_OPTION	graphics.py	/^BAD_OPTION = "Illegal option value"$/;"	v
Board	objects.py	/^class Board:$/;"	c
Boyscout	pieces.py	/^Boyscout = makerider((1,1), pf=pathfinders.crooked) # crooked bishop$/;"	v
Capture	objects.py	/^class Capture:$/;"	c
Circle	graphics.py	/^class Circle(Oval):$/;"	c
D	pieces.py	/^D = makeleaper(0,2) # dabbaba$/;"	v
DEAD_THREAD	graphics.py	/^DEAD_THREAD = "Graphics thread quit unexpectedly"$/;"	v
DEFAULT_CONFIG	graphics.py	/^DEFAULT_CONFIG = {"fill":"",$/;"	v
Entry	graphics.py	/^class Entry(GraphicsObject):$/;"	c
F	pieces.py	/^F = makeleaper(1,1) # ferz$/;"	v
FtR	pieces.py	/^FtR = add(F, chain(modify(F, nocapt), modify(R, outward))) # ferz then rook (aanca\/gryphon)$/;"	v
GraphWin	graphics.py	/^class GraphWin(tk.Canvas):$/;"	c
GraphicsError	graphics.py	/^class GraphicsError(Exception):$/;"	c
GraphicsObject	graphics.py	/^class GraphicsObject:$/;"	c
Image	graphics.py	/^class Image(GraphicsObject):$/;"	c
K	pieces.py	/^K = add(F, W) # king$/;"	v
KB	pieces.py	/^KB = add(B, K) # crowned bishop (dragon horse)$/;"	v
KR	pieces.py	/^KR = add(R, K) # crowned rook (dragon king)$/;"	v
Line	graphics.py	/^class Line(_BBox):$/;"	c
Move	objects.py	/^class Move:$/;"	c
N	pieces.py	/^N = makeleaper(2,1) # knight$/;"	v
NB	pieces.py	/^NB = add(B, N) # knighted bishop (princess\/archbishop)$/;"	v
NK	pieces.py	/^NK = add(K, N) # knighted king$/;"	v
NN	pieces.py	/^NN = makerider((2,1)) # nightrider$/;"	v
NQ	pieces.py	/^NQ = add(Q, N) # knighted queen (amazon)$/;"	v
NR	pieces.py	/^NR = add(R, N) # knighted rook (empress\/chancellor)$/;"	v
NtB	pieces.py	/^NtB = add(N, chain(modify(N, nocapt), modify(B, outward))) # knight then bishop (unicorn)$/;"	v
OBJ_ALREADY_DRAWN	graphics.py	/^OBJ_ALREADY_DRAWN = "Object currently drawn"$/;"	v
Oval	graphics.py	/^class Oval(_BBox):$/;"	c
P	pieces.py	/^P = add(initP, captP, nocaptP) # the pawn$/;"	v
Piece	objects.py	/^class Piece:$/;"	c
Point	graphics.py	/^class Point(GraphicsObject):$/;"	c
Polygon	graphics.py	/^class Polygon(GraphicsObject):$/;"	c
Q	pieces.py	/^Q = add(B, R) # queen$/;"	v
R	pieces.py	/^R = makerider((0,1)) # rook$/;"	v
Rectangle	graphics.py	/^class Rectangle(_BBox):$/;"	c
Rose	pieces.py	/^Rose = makerider((1,2), pf=pathfinders.circular) # circular knight$/;"	v
Square	objects.py	/^class Square:$/;"	c
Testpiece	pieces.py	/^Testpiece = slipR$/;"	v
Text	graphics.py	/^class Text(GraphicsObject):$/;"	c
Transform	graphics.py	/^class Transform:$/;"	c
UNSUPPORTED_METHOD	graphics.py	/^UNSUPPORTED_METHOD = "Object doesn't support operation"$/;"	v
W	pieces.py	/^W = makeleaper(0,1) # wazir$/;"	v
WtB	pieces.py	/^WtB = add(W, chain(modify(W, nocapt), modify(B, outward))) # wazir then bishop$/;"	v
_BBox	graphics.py	/^class _BBox(GraphicsObject):$/;"	c
__autoflush	graphics.py	/^    def __autoflush(self):$/;"	m	class:GraphWin	file:
__checkOpen	graphics.py	/^    def __checkOpen(self):$/;"	m	class:GraphWin	file:
__init__	graphics.py	/^    def __init__(self, *points):$/;"	m	class:Polygon
__init__	graphics.py	/^    def __init__(self, center, radius):$/;"	m	class:Circle
__init__	graphics.py	/^    def __init__(self, options):$/;"	m	class:GraphicsObject
__init__	graphics.py	/^    def __init__(self, p, *pixmap):$/;"	m	class:Image
__init__	graphics.py	/^    def __init__(self, p, text):$/;"	m	class:Text
__init__	graphics.py	/^    def __init__(self, p, width):$/;"	m	class:Entry
__init__	graphics.py	/^    def __init__(self, p1, p2):$/;"	m	class:Line
__init__	graphics.py	/^    def __init__(self, p1, p2):$/;"	m	class:Oval
__init__	graphics.py	/^    def __init__(self, p1, p2):$/;"	m	class:Rectangle
__init__	graphics.py	/^    def __init__(self, p1, p2, options=["outline","width","fill"]):$/;"	m	class:_BBox
__init__	graphics.py	/^    def __init__(self, title="Graphics Window",$/;"	m	class:GraphWin
__init__	graphics.py	/^    def __init__(self, w, h, xlow, ylow, xhigh, yhigh):$/;"	m	class:Transform
__init__	graphics.py	/^    def __init__(self, x, y):$/;"	m	class:Point
__init__	objects.py	/^    def __init__(self):$/;"	m	class:Square
__init__	objects.py	/^    def __init__(self, loc=None, necessary=None):$/;"	m	class:Capture
__init__	objects.py	/^    def __init__(self, name, forward=None):$/;"	m	class:Piece
__init__	objects.py	/^    def __init__(self, src=None, dest=None, dir=None, board=None, aux=None, piece=None):$/;"	m	class:Move
__init__	objects.py	/^    def __init__(self, width=None, height=None): # init with board created for us$/;"	m	class:Board
__str__	graphics.py	/^    def __str__(self):$/;"	m	class:Circle	file:
__str__	graphics.py	/^    def __str__(self):$/;"	m	class:Entry	file:
__str__	graphics.py	/^    def __str__(self):$/;"	m	class:Line	file:
__str__	graphics.py	/^    def __str__(self):$/;"	m	class:Oval	file:
__str__	graphics.py	/^    def __str__(self):$/;"	m	class:Point	file:
__str__	graphics.py	/^    def __str__(self):$/;"	m	class:Polygon	file:
__str__	graphics.py	/^    def __str__(self):$/;"	m	class:Rectangle	file:
__str__	graphics.py	/^    def __str__(self):$/;"	m	class:Text	file:
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:Entry
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:GraphicsObject
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:Image
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:Line
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:Oval
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:Point
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:Polygon
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:Rectangle
_draw	graphics.py	/^    def _draw(self, canvas, options):$/;"	m	class:Text
_move	graphics.py	/^    def _move(self, dx, dy):$/;"	m	class:Entry
_move	graphics.py	/^    def _move(self, dx, dy):$/;"	m	class:GraphicsObject
_move	graphics.py	/^    def _move(self, dx, dy):$/;"	m	class:Image
_move	graphics.py	/^    def _move(self, dx, dy):$/;"	m	class:Point
_move	graphics.py	/^    def _move(self, dx, dy):$/;"	m	class:Polygon
_move	graphics.py	/^    def _move(self, dx, dy):$/;"	m	class:Text
_move	graphics.py	/^    def _move(self, dx, dy):$/;"	m	class:_BBox
_onClick	graphics.py	/^    def _onClick(self, e):$/;"	m	class:GraphWin
_reconfig	graphics.py	/^    def _reconfig(self, option, setting):$/;"	m	class:GraphicsObject
_root	graphics.py	/^_root = tk.Tk()$/;"	v
_setFontComponent	graphics.py	/^    def _setFontComponent(self, which, value):$/;"	m	class:Entry
add	moves.py	/^def add(*pieces): # e.x. Q = add(R, B)$/;"	f
addlocs	moves.py	/^def addlocs(a, b):$/;"	f
auxmerges	moves.py	/^auxmerges = {$/;"	v
board	drawer.py	/^board  = None$/;"	v
boundkeepers	moves.py	/^boundkeepers = [nowrap]$/;"	v
capt	moves.py	/^def capt(board, m):$/;"	f
captP	pieces.py	/^captP = modlist(F, [direct('f'), capt]) # pawns capture as forward ferzes$/;"	v
chain	moves.py	/^def chain(*pieces):$/;"	f
checkMouse	graphics.py	/^    def checkMouse(self):$/;"	m	class:GraphWin
circular	pathfinders.py	/^def circular(m):$/;"	f
clone	graphics.py	/^    def clone(self):$/;"	m	class:Circle
clone	graphics.py	/^    def clone(self):$/;"	m	class:Entry
clone	graphics.py	/^    def clone(self):$/;"	m	class:Image
clone	graphics.py	/^    def clone(self):$/;"	m	class:Line
clone	graphics.py	/^    def clone(self):$/;"	m	class:Oval
clone	graphics.py	/^    def clone(self):$/;"	m	class:Point
clone	graphics.py	/^    def clone(self):$/;"	m	class:Polygon
clone	graphics.py	/^    def clone(self):$/;"	m	class:Rectangle
clone	graphics.py	/^    def clone(self):$/;"	m	class:Text
close	graphics.py	/^    def close(self):$/;"	m	class:GraphWin
color_rgb	graphics.py	/^def color_rgb(r,g,b):$/;"	f
colors	drawer.py	/^colors = [color_rgb(240,114,114), color_rgb(241,241,201)] # pink, white$/;"	v
compmod	moves.py	/^def compmod(board, lmod):$/;"	f
crooked	pathfinders.py	/^def crooked(m):$/;"	f
delpiece	drawer.py	/^def delpiece(s):$/;"	f
diradj	moves.py	/^def diradj(d):$/;"	f
diraway	moves.py	/^def diraway(board, m, prev):$/;"	f
direct	moves.py	/^def direct(d):$/;"	f
dirmod	moves.py	/^def dirmod(board, m, dirs):$/;"	f
draw	graphics.py	/^    def draw(self, graphwin):$/;"	m	class:GraphicsObject
expcontr	moves.py	/^def expcontr(board, l, f):$/;"	f
extend	moves.py	/^def extend(extmods, amt, pf):$/;"	f
extendmod	moves.py	/^def extendmod(board, m, extmods, amt, pf):$/;"	f
flatten	moves.py	/^def flatten(ll):$/;"	f
flush	graphics.py	/^    def flush(self):$/;"	m	class:GraphWin
forF	pieces.py	/^forF = modify(F, direct('f')) # forward only ferz$/;"	v
forW	pieces.py	/^forW = modify(W, direct('f')) # forward only wazir$/;"	v
get	objects.py	/^    def get(self, loc):$/;"	m	class:Board
getAnchor	graphics.py	/^    def getAnchor(self):$/;"	m	class:Entry
getAnchor	graphics.py	/^    def getAnchor(self):$/;"	m	class:Image
getAnchor	graphics.py	/^    def getAnchor(self):$/;"	m	class:Text
getCenter	graphics.py	/^    def getCenter(self):$/;"	m	class:_BBox
getHeight	graphics.py	/^    def getHeight(self):$/;"	m	class:GraphWin
getHeight	graphics.py	/^    def getHeight(self):$/;"	m	class:Image
getMouse	graphics.py	/^    def getMouse(self):$/;"	m	class:GraphWin
getP1	graphics.py	/^    def getP1(self): return self.p1.clone()$/;"	m	class:_BBox
getP2	graphics.py	/^    def getP2(self): return self.p2.clone()$/;"	m	class:_BBox
getPixel	graphics.py	/^    def getPixel(self, x, y):$/;"	m	class:Image
getPoints	graphics.py	/^    def getPoints(self):$/;"	m	class:Polygon
getRadius	graphics.py	/^    def getRadius(self):$/;"	m	class:Circle
getText	graphics.py	/^    def getText(self):$/;"	m	class:Entry
getText	graphics.py	/^    def getText(self):$/;"	m	class:Text
getWidth	graphics.py	/^    def getWidth(self):$/;"	m	class:GraphWin
getWidth	graphics.py	/^    def getWidth(self):$/;"	m	class:Image
getX	graphics.py	/^    def getX(self): return self.x$/;"	m	class:Point
getY	graphics.py	/^    def getY(self): return self.y$/;"	m	class:Point
getloc	objects.py	/^    def getloc(self):$/;"	m	class:Square
getmousesquare	drawer.py	/^def getmousesquare():$/;"	f
height	main.py	/^height = 16$/;"	v
hlcol	drawer.py	/^hlcol  = color_rgb(42,255,42) # highlight color$/;"	v
hlloc	drawer.py	/^def hlloc(l):$/;"	f
hlsquare	drawer.py	/^def hlsquare(s):$/;"	f
idCount	graphics.py	/^    idCount = 0$/;"	v	class:Image
idem	pathfinders.py	/^def idem(m):$/;"	f
imageCache	graphics.py	/^    imageCache = {} # tk photoimages go here to avoid GC while drawn $/;"	v	class:Image
inbounds	objects.py	/^    def inbounds(self, loc):$/;"	m	class:Board
init	drawer.py	/^def init(width, height):$/;"	f
initP	pieces.py	/^initP = modlist(makerider((0,1),2), [onrow(1), direct('f'), nocapt]) # initial pawn move, captures excluded$/;"	v
invmod	moves.py	/^def invmod(mod):$/;"	f
isClosed	graphics.py	/^    def isClosed(self):$/;"	m	class:GraphWin
isOpen	graphics.py	/^    def isOpen(self):$/;"	m	class:GraphWin
leapoffs	moves.py	/^def leapoffs(a,b):$/;"	f
leftrightcyl	moves.py	/^def leftrightcyl(board, m):$/;"	f
locdelpiece	drawer.py	/^def locdelpiece(l):$/;"	f
locplacepiece	drawer.py	/^def locplacepiece(l, piece):$/;"	f
main	main.py	/^def main():$/;"	f
makeRect	drawer.py	/^def makeRect(corner, width, height):$/;"	f
makeleaper	moves.py	/^def makeleaper(a, b):$/;"	f
makeleapgen	moves.py	/^def makeleapgen(a, b):$/;"	f
makerider	moves.py	/^def makerider($/;"	f
mergemoves	moves.py	/^def mergemoves(m1, m2):$/;"	f
modify	moves.py	/^def modify(p, mod):$/;"	f
modlist	moves.py	/^def modlist(p, ml):$/;"	f
mousesquare	drawer.py	/^def mousesquare(m):$/;"	f
move	graphics.py	/^    def move(self, dx, dy):$/;"	m	class:GraphicsObject
nocapt	moves.py	/^nocapt = invmod(capt)$/;"	v
nocaptP	pieces.py	/^nocaptP = modlist(W, [direct('f'), nocapt]) # pawns move as forward wazirs$/;"	v
nofriendly	moves.py	/^def nofriendly(board, m):$/;"	f
nohop	moves.py	/^def nohop(board, m):$/;"	f
noretrace	moves.py	/^def noretrace(board, m):$/;"	f
normalise	moves.py	/^def normalise(d): # normalise a direction tuple$/;"	f
nowrap	moves.py	/^def nowrap(board, m):$/;"	f
onrow	moves.py	/^def onrow(r, src=True):$/;"	f
onrowmod	moves.py	/^def onrowmod(board, m, r, src=True):$/;"	f
outward	moves.py	/^def outward(board, m, prev):$/;"	f
p1	moves.py	/^    def p1(board, src):$/;"	f	function:makeleapgen
piecemap	main.py	/^piecemap = {$/;"	v
placepiece	drawer.py	/^def placepiece(s, piece):$/;"	f
play	main.py	/^def play(board, side): # get moves from alternating sides$/;"	f
plot	graphics.py	/^    def plot(self, x, y, color="black"):$/;"	m	class:GraphWin
plotPixel	graphics.py	/^    def plotPixel(self, x, y, color="black"):$/;"	m	class:GraphWin
promptClose	graphics.py	/^    def promptClose(self, x, y=None):$/;"	m	class:GraphWin
promptMouse	graphics.py	/^    def promptMouse(self, x, y, prompt):$/;"	m	class:GraphWin
prunelen	moves.py	/^def prunelen(f):$/;"	f
q	moves.py	/^    def q(board, m):$/;"	f	function:invmod
q	moves.py	/^    def q(board, m):$/;"	f	function:prunelen
q	moves.py	/^    def q(board, src):$/;"	f	function:add
q	moves.py	/^    def q(board, src):$/;"	f	function:chain
q	moves.py	/^    def q(board, src, prev=None):$/;"	f	function:modify
readfen	main.py	/^def readfen(fen):$/;"	f
reduce	moves.py	/^def reduce(d):$/;"	f
replace	moves.py	/^def replace(board, m):$/;"	f
res	moves.py	/^    def res(board, m):$/;"	f	function:compmod
ride	moves.py	/^def ride(board, m, pf):$/;"	f
samequad	moves.py	/^def samequad(d1, d2):$/;"	f
sameside	moves.py	/^def sameside(p1, p2):$/;"	f
save	graphics.py	/^    def save(self, filename):$/;"	m	class:Image
screen	graphics.py	/^    def screen(self,x,y):$/;"	m	class:Transform
set	objects.py	/^    def set(self, loc, piece):$/;"	m	class:Board
setArrow	graphics.py	/^    def setArrow(self, option):$/;"	m	class:Line
setBackground	graphics.py	/^    def setBackground(self, color):$/;"	m	class:GraphWin
setCoords	graphics.py	/^    def setCoords(self, x1, y1, x2, y2):$/;"	m	class:GraphWin
setFace	graphics.py	/^    def setFace(self, face):$/;"	m	class:Entry
setFace	graphics.py	/^    def setFace(self, face):$/;"	m	class:Text
setFill	graphics.py	/^    def setFill(self, color):$/;"	m	class:Entry
setFill	graphics.py	/^    def setFill(self, color):$/;"	m	class:GraphicsObject
setMouseHandler	graphics.py	/^    def setMouseHandler(self, func):$/;"	m	class:GraphWin
setOutline	graphics.py	/^    def setOutline(self, color):$/;"	m	class:GraphicsObject
setPixel	graphics.py	/^    def setPixel(self, x, y, color):$/;"	m	class:Image
setSize	graphics.py	/^    def setSize(self, size):$/;"	m	class:Entry
setSize	graphics.py	/^    def setSize(self, size):$/;"	m	class:Text
setStyle	graphics.py	/^    def setStyle(self, style):$/;"	m	class:Entry
setStyle	graphics.py	/^    def setStyle(self, style):$/;"	m	class:Text
setText	graphics.py	/^    def setText(self, t):$/;"	m	class:Entry
setText	graphics.py	/^    def setText(self,text):$/;"	m	class:Text
setTextColor	graphics.py	/^    def setTextColor(self, color):$/;"	m	class:Entry
setTextColor	graphics.py	/^    def setTextColor(self, color):$/;"	m	class:Text
setWidth	graphics.py	/^    def setWidth(self, width):$/;"	m	class:GraphicsObject
shortR	pieces.py	/^shortR = makerider((0,1), aftmods=[nohop, replace, nofriendly, prunelen(lambda x: x <= 4)])$/;"	v
skiR	pieces.py	/^skiR = chain(modify(W,nocapt), modify(R, diraway))$/;"	v
skipR	pieces.py	/^skipR = makerider((0,2))$/;"	v
slipR	pieces.py	/^slipR = add(W, chain(modify(W, nocapt), modify(makerider((0,2)), diraway)))$/;"	v
spritemap	drawer.py	/^spritemap = {}$/;"	v
squareside	drawer.py	/^squareside = 50 # side length of board square$/;"	v
sublocs	moves.py	/^def sublocs(a, b):$/;"	f
test	graphics.py	/^def test():$/;"	f
toScreen	graphics.py	/^    def toScreen(self, x, y):$/;"	m	class:GraphWin
toWorld	graphics.py	/^    def toWorld(self, x, y):$/;"	m	class:GraphWin
undraw	graphics.py	/^    def undraw(self):$/;"	m	class:GraphicsObject
undraw	graphics.py	/^    def undraw(self):$/;"	m	class:Image
unhlloc	drawer.py	/^def unhlloc(l):$/;"	f
unhlsquare	drawer.py	/^def unhlsquare(s):$/;"	f
update	drawer.py	/^def update(newboard):$/;"	f
update	graphics.py	/^def update():$/;"	f
updowncyl	moves.py	/^def updowncyl(board, m):$/;"	f
width	main.py	/^width = 16$/;"	v
win	drawer.py	/^win    = None$/;"	v
world	graphics.py	/^    def world(self,xs,ys):$/;"	m	class:Transform
yUp	graphics.py	/^    def yUp(self):$/;"	m	class:GraphWin
