# all pieces come in the form of functions
# funtions are called to obtain the legal moves a piece can make on a given board at a certain location
# viz. p(board, file, rank) gets the moves for piece p
# moves are in the form of a pair of a location, and the resulting board
^^^ partially outdated

- [x] leapers
- [x] riders
- [x] pawns
    - [ ] promotion
    - [x] initial moves
- [ ] en passant, castling
- [ ] check, checkmate, (royalty) illegal moves
- [ ] hoppers
- [x] bent riders (one moveset after another, influencing each other possibly)
- [x] circular riders
- [x] crooked riders
- [ ] ranged riders
    - [ ] min
    - [x] max
        - (through amt, i think)
- [ ] checkers
- [ ] hoppers
    - [ ] cannons
    - [ ] locusts
    - [ ] grasshoppers
- [ ] marines
- [x] cylindrical
- [ ] ski, skip, slip riders
- [ ] falcon
- [ ] horse
- [ ] lion (twice moving king)
- [ ] fire demon (passive effect)
- [ ] joker
- [ ] shooting pieces
- [ ] iron piece (cannot be captured)

variants to implement
- [ ] baroque
    - [ ] pincer
    - [ ] withdrawer
    - [ ] immobiliser
    - [ ] long-leaper/leaper
    - [ ] coordinator
    - [ ] chameleon
- [ ] alice chess, for the confusion
- [ ] basilisk chess?
- [ ] marseillais chess
- [x] cylindrical

- [ ] make compatible or semi-compatible with betza notation or your own notation
- [ ] streamline the modification process and piece creation process. lists of modifications, leapers->riders more direct, etc.

gameplay
- [x] make a chessboard
- [x] figure out where clicks land
- [x] put pieces on the chessboard
- [x] FEN -> board
- [ ] board -> FEN
- [x] move pieces on the chessboard
- [x] get legal moves on chessboard, based on arbitrary fairy chess move properties
- [ ] determine check and checkmate
- [ ] make an engine that's good
- [x] make object oriented
- [ ] make readfen() call drawer.update()
- [ ] list moves, reset board, free edit, undo moves, etc.

a proto-piece is simply a list of offsets, independent of location and surroundings of a piece

a piece is a function that takes in a board and loc and returns:
    legal locs to move to
    the resulting possible boards
(in the form of a dictionary)

to turn a proto-piece into a piece we need to:
    add the offsets to the given loc
    determine which resulting squares are legal

to do so, we have a series of modifiers, which:
    restrict possible moves
    define the results of possible moves

for example, a left-right-cylindrical modifier will allow some "illegal" coordinates by simply making them wrap around the board
a capture-by-replacement modifier simply disallows captures of friendly pieces, and allows capture of enemy pieces
a no-jumping modifier

that is to say, each modifier takes in a (loc, board) pair and either:
    returns False/None, meaning this is not allowed
    returns a new modified (loc,board) pair

therefore modifiers must be applied in order, and are not commutative
we must determine whether a move is cylindrical/noncylindrical before determine things such as capture by replacement

actually no.
cylindrical, circular modifiers, are special.

such modifiers are applied to both "dir" and "loc".
so for example, the cylindrical modifier would perform modular arithmetic on every loc after it is created
a circular modifier would be tricky, but it should be possible by modifying dir.
why is this necessary?
riders have to integrate with them
a cylindrical rider does not know where to stop. the only way is by hitting a duplicate.
if we go fully in a loop as i rider, we know to stop
then, we can filter it through ordinary modifiers such as capture by replacement
therefore to get all the rider moves, we move it as a leaper,
then we apply such special modifiers
then we add it to the candidate moves
and we loop until we hit a duplicate (the direction and aux of the duplicate must be the same, too)
(but then how to we figure out legal moves for hoppers, etc. on a cylinder?)
right. the modifier persists. to check if something is capturing by replacement with no jumps, for example,
we simply add the direction from the src to the dest repeatedly, BUT in between each addition, we perform the aforementioned special modifiers
this way you can, for example, jump, while also moving cylindrically or circularly
therefore every "move" is this tuple:
    (src, dest, dir, board, movemodifiers)

perhaps movemodifiers should be external, i don't know
also to consider, some moves (such as riders?) may branch into alternatives.
therefore each modifier applied to a move should return a list of the modified moves, which is either empty (illegal move in the first place) or one, or more

keep in mind all of this has to take place between functions

pieces start being able to jump by default, and are banned from jumping by a modifier

to make a leaper:
we get the list of offsets
then, we combine them with src to get a list of (src,dest)
we attach the dir, but NOT the board yet
we perform the modifier 

after the proto-phase (the 1st one) everything can be done in terms of lists of Moves

perhaps a downside of this scheme is that we cannot simply call makerider() on some leaper to get a rider.
we have to call it on the protoleaper
but that is not a huge loss

circular motion (rose):
2,1
1,2
-1,2
-2,1
-2,-1
-1,-2
1,-2
2,-1
however, you can go two ways around this circle.
therefore you cannot tell which should come next, based on the current dir
more data has to be provided
perhaps, we could have another element of the tuple, with any data necessary for the type of move being performed, e.x. clockwise and counterclockwise
this data will be in the form of a dictionary. keys and values can be added as needed

like roses, crooked bishops, for example, will take advantage of this data
call the data 'aux' for auxiliary

need to consider how to implement crooked pieces, skip/ski/slip pieces, etc.
crooked pieces are a special case of concatenation of move sets
in the case of, ex. bent rooks,
it's a ferz and then a rook.
however the rook must move OUTWARDS
that is probably something that can be built into the aux


it should not be a tuple, it should be an object

how to implement shooting pieces? it is then hard to tell what is friendly fire or not, because that is based on destination
solution: implement the captured location(s) in aux, separate it from src and dest
this solves the same problem for withdrawers, etc.
but then say a pincer tries to capture two pieces, one is friendly, one is enemy
and only the enemy gets captured, obviously
but the move itself is not banned!
on the contrary, if an ortodox knight is trying to capture a friendly piece, that move is banned altogether
perhaps we need a new function which takes a look at the modifications made to aux, and decides whether we can keep going like this, or must stop

solution: we define captures as being "necessary" or "unnecessary"
this is not the most general solution, but it's simple and should work for most things
i can change it if necessary
so something such as friendly() that comes in and bans friendly captures, will check if such a capture is necessary for the move to occur. all captures by replacement are necessary captures. on the other hand, a withdrawer capture, say, does not have to occur, if it moves away from a friendly piece
if a capture is banned but the move goes forward, we simply replace the captured square with what was there originally

also my implementation of Move and leapers forgets about the modification functions that will be needed for riders (cylindrical, non, etc.)
i.e. a function similar to non-wrap must be builtin to every Move, i believe

so: there are two types of modifiers
one makes side effects occur ("map", however not necessarily one-to-one)
one determines if such a move is legal ("filter")

however, the filter is strange:
sometimes we can let a move through, but have to change it (e.x. stop friendly capture by withdrawer)
so this filter is also a map
it returns [] if the move is illegal,
and [modifiedmove] if it has to be modified
and [move] if it can be let through
so everything is a map

under this scheme it is impossible to turn, say, a rider, directly into a cylindrical piece. to do this we would have to be able to reach in and change the coordinate modifier function, which is currently nested within many functions.
this would require a generalized form of move represented as, say, a list of modifiers, that get applied in order to create the desired function
this should not be too hard to implement afterward, so right now i will just go ahead without doing that

perhaps riders and leapers can be generalized into similar forms
we need a *generator*
that is what the protoleaper is
well, not exactly
the protoleaper is independent of position
the generator for leapers includes nowrap, hence it must take into account position
the generator:
    generates destinations
    (removes duplicates)
rider generators, obviously, are an extension of leaper generators, but they follow the same concept
the reason this matters is because nowrap, i think
well, it doesn't matter, but it might be useful
to get a rider from a leaper:
    we take everything generator by the leaper generator (a list of Moves, only containing src, dest, dir)
    we apply all necessary modifiers (ex. nowrap) to these moves
        some moves may be eliminated as a result
    then!!! to extend this leaper, we apply an *extension* modifier, which takes all the moves, and extends them in the given direction
    we alternate between modifiers and extension until our list of moves stops growing (duplicates/out-of-bounds/etc. only)
    this repeated application of the extension can be encapsulated by a "full extension" modifier which hides away all these details
    then, we do the necessary capture, nofriendly, nohop modifiers to make it a proper rider
so everything can still be separated into functions
of course, this method is slow and impractical, but it is general
to run a chess engine we would want a more direct, less general implementation
but that is not the current goal
we STILL cannot simply apply makerider(leaper) to get what we want, but we are close
now all we need to do is go from functions to lists of compounded functions,
and then to make a rider we simply insert it at the necessary step
protoleaper -> leap generator -> bounds modifiers -> modifiers
protoleaper -> leap generator -> (bounds modifiers <-> extension) -> modifiers
i.e.
protoleaper -> leap generator -> full extension -> modifiers
something like that.
then, perhaps we should build the bounds modifiers into the moves, as i thought
"extmod" or something, for when you want to extend
is that a good way to go about it?
the first leap itself should be an extension
but an extension from what?
moving nowhere is not a valid move
and we cannot simply ban moving to your current location, as that is valid for roses, and cylindrical pieces, most likely
and also we cannot split the zero direction into many
i guess we cannot do that then
renaming protoleap to leapoffs, for clarity

got it:
we have a mod function "extend" which can perform both zero extension (leaper), fixed amount of extension (used to to indefinite), and indefinite (rider) extension
this function calls all the extmods as passed to it.
then i suppose extmods should NOT be stored in the moves
we just have to assume that all directions get the same mods
this is alright as if we want to differentiate, we can simply make separate pieces and them combine them
extmods are passed to the extend modifier, of course
please do not pass extend to extend as an extmod
(or do, and achieve what you want through roundabout recursion)

consider a destructive rose
it has two ways to get to any point other than the source
and destroys everything in its path to get there
the directions are different
the destination is the same
that is two separate moves
that would be difficult for the GUI to implement
however it's doable
just have a popup if you click a destination with multiple options
with some extra highlights
anyway my point is we will have to remove duplicates and to do that we have to compare literally everything
no, not that
only the boards, we have to compare, because ultimately the end result is in the boards
... but then we would have to wait for all the other modifiers to do that
so instead we just have to look at the unmodified move itself
including aux, dir, src, dest
but the question is, can separate leap moves extend into identical moves?
or how about this: we just let them exist.
if dest is different, then obviously they are distinct
if dest is same, then when it comes to chosing a move, we only show a popup if the resulting *boards* are different
otherwise they are just duplicates that are allowed to exist
that way we can have extend() be a regular modifier function that can be applied through modify(), operating on one move at a time

i mean, i wasn't wrong that the leapgen IS just an extension of 0. it just produces many children, instead of 1 or 2 or 0
the problem is that 0 itself is not allowed

# gotta check for duplicates. write a function that just checks all attributes of Move, compare with another Move
# aux needs to be checked as well!
# we actually have to check for duplicates here, contrary to what i said earlier, because riders/indefinite extensions need to know when to stop
# or, perhaps, we could send along some function which tests for equality
# i'm not sure

the key is to realize that ALL rider moves are distinct if they have different paths
but that just ruins everything. what if a rider can hop over n things and is cylindrical?
then we cannot just stop when we reach our source. we have to keep going forever.
riders must have two stopping conditions:
e.x. we use up all of some allowed resource (hops, captures, distance, etc.)
but say this is not satisfied, we cannot keep going in a circle forever
oh.
huh?
well say the condition is distance, then going 8 squares cylindrically and then 4 is the same as going just 4
say the condition is capture, then you cannot capture more retracing your old path
etc.
but what if your path can split? say some piece can ride 8 squares cylindrically horizontally and then the same, vertically?
that would be confusing as hell
maybe we can ignore such a possibility. it may not even be possible, unless you are making a chess piece that can move anywhere.
for example, there are pieces that get to change direction, but then they have a limited distance they can travel
... but i still want something generalized
so we should build in a stop condition
once a move reaches that condition, we end
how to implement?
of course we need a function that tests a move, to see if it must stop in its tracks
it should probably be packaged with extmods
seeing how some of them are also stop conditions
oh i know:
we don't need any extra stop conditions
whenever you encounter a location already in your path, AND all possible extensions of that coordinate are in your path, you can stop
actually no, you can't because what if the next coordinate then branches
we will have to explore the whole entire tree of possibilities then!
but how??? that will be insane
and we STILL won't know when to stop
i guess we will have to figure out stop conditions individually, as there is no universal one
then for riders, it will be encountering a previously visited square in the same direction?
or does direction matter?
let's just make it directionless and we can change it later

there is a piece that requires you to jump over one other piece
logically there is then a piece that requires you jump over exactly two other pieces
this is why other modifiers (replace, nohop, etc.) cannot be applied until after all the possible rider moves have been listed

how should we differentiate these modifiers then?
i don't know
pathfinding and board modifying?
perhaps

actually, i think direction is important
for example, a king with 3 moves a turn
might want to revisit a square

really you can dream up arbitrarily complex paths that a piece can take
we just need something that deals with all the sane ones

the function extend() will trust that the modifiers will eventually stop creating moves


need a way to categorize the different modifiers
at the moment to make a leaper, we use:
    nowrap
    replace
    nofriendly
to make a rider:

oh right, we use extend for leapers too, that's why!
then we don't need to categorize

pawns:
how to tell if something is an initial move?
actually this is part of a wider problem
this requires us to have knowledge of the game over many moves
well, there is a more logical way to restrict pawns anyways, which is, by rank
you can move 2 squares if on the 2nd rank from your perspective
but of course we will run into the initial move dilemma for castling anyway

at the moment direction is implemented piece-by-piece, each piece gets its own direction property
perhaps it should be built into a Player, and each piece references its Player
but that's not very important right now

ok bent riders:
they are an example of chaining/concatenation

i am able to implement the gryphon (ferz + outward rook) without any extra communication between the two pieces
we simply know the where the ferz moved, and also where our original source was. using that we can figure out how to move outward with a general modifier
but it might be necessary to have some interface for consecutive pieces to communicate with each other, for more complicated things


the pathfinders need more information. i need to know whether to go clockwise or anticlockwise,
crooked up or crooked left, etc.

the information should be stored in aux. then pathfinder must be passed the Move whose path we are trying to extend
wait no.
we have some confusion.
there is a general direction (up, down, etc.)
and the momentary direction (in a zigzag, up-left and up-right, for example)
the thing is we want to be able to derive this all from a leaper generator
and problematically, the same initial leap can split into multiple paths, but afterward there is no splitting
perhaps we have to look at path, to inform pathfinder...

so: we look at the last two coordinates on path.
if there is only one in path, then it just came out of makeleapgen() and is currently on its first pass through extend()
then we diverge
if there are two or more, we can then derive the general direction (three points including src) it's going in, and continue
all of this can be done through rotate(), mirror(), etc. operations. that is the basis of crooked and cylindrical pipeces
